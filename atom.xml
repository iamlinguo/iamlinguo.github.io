<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iamLinGuo</title>
  
  <subtitle>Java-</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iamlinguo.github.io/"/>
  <updated>2020-06-10T16:24:10.404Z</updated>
  <id>https://iamlinguo.github.io/</id>
  
  <author>
    <name>LinGuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我拥有自己的blog了！</title>
    <link href="https://iamlinguo.github.io/2020/06/11/design_simpleFactoryPattern/"/>
    <id>https://iamlinguo.github.io/2020/06/11/design_simpleFactoryPattern/</id>
    <published>2020-06-10T16:15:54.758Z</published>
    <updated>2020-06-10T16:24:10.404Z</updated>
    
    <content type="html"><![CDATA[<p>现在是北京时间2020-06-10 22:30，今天星期三，哈哈最近在看的一部动漫“篮球少年王”更新了，我已经迫不及待了，先忍忍，容我写完这篇笔记。</p><p>简单的做一下今天工作的总结，早上出门下了点小雨，不过还好，因为！我带伞了哈哈哈哈，今天的工作内容主要还是改代码修代码，cto给我做的一个短信接口挑出了不少毛病，很多隐藏的bug，教我如何把代码抽离控制器实现业务层的封装，上午一直在做一个昨天没做完的图片接口，下午看了会同时刘哥写的代码，准备对接明天的任务。</p><p>最近在看“大话设计模式”这本书，今天的内容就写一下前几天看的内容把 </p><hr><h4 id="1-我为什么要学？"><a href="#1-我为什么要学？" class="headerlink" title="1. 我为什么要学？"></a>1. 我为什么要学？</h4><p>有没有一天，你突然觉得自己基础很差劲，在学校也没有好好学，工作也只会所谓的CV大法，看着复杂的项目不知从何下手，你是否听过一句话叫<code>“基础不牢，地动山摇“</code>。没错，这就是我，现在的我，从培训机构出来，感觉时间很快很匆忙就把一堆框架学完了，也写了很多代码，可还是对阅读代码、特别是开源代码库感到非常吃力，所以这也是我学习的决心，我要把没学过的东西都补回来。<br>可是每次下定决心打算学习一个知识点，三天打鱼两天晒网终究没学到什么东西，学了忘忘了学，反反复复总结：没学到啥jb。(废话好像有点多了…)<br>设计模式，我们任何一门语言好像都曾听闻过它的强大，它的好处，可我们一直停留在了对它的印象，其实不如静下心来好好学一学，相信一定收获颇丰。<br>设计模式从字面意思很好理解，设计！就这两个字足够你理解它，何为设计，设计不就是把一样不太完美的东西，经过你的一番修饰，让它变得完美。代码亦是如此，我们在工作中写了不知道多少冗余、复杂、流水代码，以至于隔三日定当不相识(????这tm是我写的代码黑人???三连)，想象一下，如果公司某个核心开源框架的底层是如此，那..后期可能会是一场灾难，这也是现在公司为什么不推崇faxxJson的一大原因(虽然易用，但bug居多，不宜长期打算，我不是黑粉！！)，设计模式我觉得最为重要的的一点莫过于这两点：<code>可复用、易读</code>。</p><h4 id="2-我学了设计模式能干嘛？"><a href="#2-我学了设计模式能干嘛？" class="headerlink" title="2. 我学了设计模式能干嘛？"></a>2. 我学了设计模式能干嘛？</h4><p>能干嘛？这tm还用想，刚刚不是说了嘛，基础差、看不懂！我不喜欢什么大道理，我就是看不懂(底子差)，我想先从设计模式入手，一步一步进阶。<br>我是一个有理想的码农，我希望某一天我也能写一款自己的开源项目给别人使用，讲实在的，能干嘛？举个例子，我现在每天写的代码，一个Method300+的代码，大量的if、else、for，在以前，我是没有意识去修改它的，项目嘛！能跑就行，有bug后期再改，其实这样是很不对的，天天CV上班摸鱼，三年下来还是老样子，更别提什么新技术新框架的掌握了，像这种大量的冗余代码的时候，大可仔细思考，那部分的代码可以抽出来形成单独的接口，在没看设计模式这本书之前，我是没有这种思想觉悟的，多学习积累经验嘛。</p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>简单工厂模式这是我看的第一个设计模式，也是每一个想学习设计模式人的入门级知识，其实我目前也只学习了这一种哈哈哈哈。<br>请看以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num1,num2,result; </span><br><span class="line">String symbol; <span class="comment">//符号</span></span><br><span class="line">System.out.println(<span class="string">"输入第一个数字"</span>);</span><br><span class="line">num1 = in.nextDouble();</span><br><span class="line">System.out.println(<span class="string">"输入第二个数字"</span>);</span><br><span class="line">num1 = in.nextDouble();</span><br><span class="line">System.out.println(<span class="string">"输入一个运算符"</span>);</span><br><span class="line">symbol = in.next(); </span><br><span class="line"><span class="keyword">if</span>(<span class="string">"+"</span>.equals(symbol))&#123;</span><br><span class="line">    result = num1 + num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"-"</span>.equals(symbol))&#123;</span><br><span class="line">    result = num1 - num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"*"</span>.equals(symbol))&#123;</span><br><span class="line">    result = num1 * num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"/"</span>.equals(symbol))&#123;</span><br><span class="line">    <span class="keyword">if</span>(num2 &lt;= <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    result = num1 / num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看着是没有什么问题得把，如果实现了功能你是会去想如何扩展呢？还是直接push。</p><blockquote><p>Q1:  如果有1000种运算方法，怎么办？<br>    An: CV</p></blockquote><blockquote><p>Q2:  如果多个业务需要调用其中一个方法，怎么办？<br>    An: again</p></blockquote><p>问题还有很多，这两个可能是我们可能听闻过的，其实很简单，请看以下分解：<br>num1,num2,result;这三个变量实际上是固定的，所以我们把它封装到一个对象里面： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"><span class="comment">//计算需要的数值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> Number1;  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> Number2;</span><br><span class="line"><span class="comment">// get set方法 </span></span><br><span class="line"><span class="comment">//返回结果的方法  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们是否可以把每个操作看做一个对象，比如加法，这个对象只做只做加法运算，减法只做减法运算,运算的对象来自哪？就是我们刚刚定义的<code>Operation</code>对象。<br>比如把加减乘除运算符拆分成四个对象，并且继承自需要运算的对象： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">extends</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getNumber1() + <span class="keyword">super</span>.getNumber2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//乘法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span> <span class="keyword">extends</span> <span class="title">Operation</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getNumber1() * <span class="keyword">super</span>.getNumber2(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他操作雷同</span></span><br></pre></td></tr></table></figure><p>重点来了！<br>什么是工厂，我第一意识就是想到了打工的工厂，不同的环节形成了工厂的流水线作业，假如我在一家做饼的工厂的新人，我负责的工作是和面粉，同事1负责的是烧饼，同事2负责的是打包。当我每天上班走到我的岗位的时候，经过了同事2打包的地方，我继续走，因为这不是我的岗位，经过同事1的时候，发现还不是，知道走到二楼，我才找到了我的岗位位置，开始一天的工作。(我实在想不出什么好的例子了)，我们的工厂模式其实也差不多：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title">createOperation</span><span class="params">(String operationType)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"+"</span>.equals(operationType))&#123;  <span class="comment">//同事2</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OperationAdd();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"-"</span>.equals(operationType))&#123;  <span class="comment">//同事1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OperationSub();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"*"</span>.equals(operationType))&#123;  <span class="comment">//我</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OperationMul();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"/"</span>.equals(operationType))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OperationDiv();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有没有发现一个特点，就是这个工厂对象里面包含了所有我需要的运算对象，我想要进行某一个运算的时候，直接去这个对象中拿就行了(就像我和我的同事们都被限制在这家工厂中)，当然需要给定你的条件(operationType)</p><p>今天的笔记就到这里。</p><ul><li><a href="https://iamlinguo.github.io/">iamlinguo</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在是北京时间2020-06-10 22:30，今天星期三，哈哈最近在看的一部动漫“篮球少年王”更新了，我已经迫不及待了，先忍忍，容我写完这篇笔记。&lt;/p&gt;
&lt;p&gt;简单的做一下今天工作的总结，早上出门下了点小雨，不过还好，因为！我带伞了哈哈哈哈，今天的工作内容主要还是改代码
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://iamlinguo.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>我拥有自己的blog了！</title>
    <link href="https://iamlinguo.github.io/2020/06/04/myblog/"/>
    <id>https://iamlinguo.github.io/2020/06/04/myblog/</id>
    <published>2020-06-03T18:31:43.518Z</published>
    <updated>2020-06-07T15:18:27.116Z</updated>
    
    <content type="html"><![CDATA[<p>其实之前自己写过一个blog,但是感觉不太好用，所以chrome了一下，发现很多人都在用这个HEXO的静态博客，效果还不错，<br>刚好解决了我的燃眉之急，让我快速短时间的有一个总结的地方，顺便做做技术分享。<br>我一直讲的一句话就是，“生活需要仪式感”。<br>学习，亦是如此<br>所以此时此刻此景，我要开启属于我的生涯，我的技术生涯，我的职场生涯，去追求我所热爱的东西<br>2020-06-07<br>地点：魔都<br>加油吧，少年！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实之前自己写过一个blog,但是感觉不太好用，所以chrome了一下，发现很多人都在用这个HEXO的静态博客，效果还不错，&lt;br&gt;刚好解决了我的燃眉之急，让我快速短时间的有一个总结的地方，顺便做做技术分享。&lt;br&gt;我一直讲的一句话就是，“生活需要仪式感”。&lt;br&gt;学习，亦
      
    
    </summary>
    
    
    
      <category term="初衷" scheme="https://iamlinguo.github.io/tags/%E5%88%9D%E8%A1%B7/"/>
    
  </entry>
  
</feed>
